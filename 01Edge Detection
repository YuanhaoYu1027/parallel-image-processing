#include <iostream>
#include <vector>
#include <cmath>
#include <opencv2/opencv.hpp>
#include <omp.h>

using namespace cv;
using namespace std;

// Sobel filter kernels
int gx[3][3] = {
    {-1, 0, 1},
    {-2, 0, 2},
    {-1, 0, 1}
};

int gy[3][3] = {
    {-1, -2, -1},
    {0, 0, 0},
    {1, 2, 1}
};

// Function to apply Sobel filter
Mat applySobelFilter(const Mat& img) {
    Mat edgeImg = img.clone();
    #pragma omp parallel for collapse(2)
    for (int i = 1; i < img.rows - 1; i++) {
        for (int j = 1; j < img.cols - 1; j++) {
            int gx_sum = 0;
            int gy_sum = 0;

            for (int k = -1; k <= 1; k++) {
                for (int l = -1; l <= 1; l++) {
                    gx_sum += gx[k + 1][l + 1] * img.at<uchar>(i + k, j + l);
                    gy_sum += gy[k + 1][l + 1] * img.at<uchar>(i + k, j + l);
                }
            }

            int edge_val = sqrt(gx_sum * gx_sum + gy_sum * gy_sum);
            edgeImg.at<uchar>(i, j) = edge_val > 255 ? 255 : edge_val;
        }
    }
    return edgeImg;
}

int main() {
    // Load image
    Mat img = imread("path_to_your_image", IMREAD_GRAYSCALE);

    if (img.empty()) {
        cerr << "Error: Image cannot be loaded..!!" << endl;
        return -1;
    }

    // Apply Sobel filter
    Mat edgeImg = applySobelFilter(img);

    // Display results
    imshow("Original Image", img);
    imshow("Edge Detected Image", edgeImg);

    waitKey(0);
    return 0;
}
